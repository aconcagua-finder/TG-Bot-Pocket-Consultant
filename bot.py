#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import asyncio
import json
import pickle
from datetime import datetime, timedelta
from typing import Dict, Optional
import re

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode
import openai
import requests
from dotenv import load_dotenv
import PyPDF2
from docx import Document
import io

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, os.getenv('LOG_LEVEL', 'INFO'))
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PERPLEXITY_API_KEY = os.getenv('PERPLEXITY_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenRouter (–∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI SDK —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º –±–∞–∑–æ–≤—ã–º URL)
from openai import AsyncOpenAI
openrouter_client = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_limits = {}
DAILY_QUESTION_LIMIT = 10
DAILY_DOCUMENT_LIMIT = 10

class UserLimits:
    def __init__(self):
        self.questions_count = 0
        self.documents_count = 0
        self.last_reset = datetime.now().date()
    
    def reset_if_needed(self):
        today = datetime.now().date()
        if today > self.last_reset:
            self.questions_count = 0
            self.documents_count = 0
            self.last_reset = today
    
    def can_ask_question(self) -> bool:
        self.reset_if_needed()
        return self.questions_count < DAILY_QUESTION_LIMIT
    
    def can_process_document(self) -> bool:
        self.reset_if_needed()
        return self.documents_count < DAILY_DOCUMENT_LIMIT
    
    def increment_questions(self):
        self.reset_if_needed()
        self.questions_count += 1
    
    def increment_documents(self):
        self.reset_if_needed()
        self.documents_count += 1

def save_user_limits():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open("user_limits.pkl", "wb") as f:
            pickle.dump(user_limits, f)
    except Exception as e:
        logger.error(f"Error saving user limits: {e}")

def load_user_limits():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_limits
    try:
        if os.path.exists("user_limits.pkl"):
            with open("user_limits.pkl", "rb") as f:
                user_limits = pickle.load(f)
            logger.info(f"Loaded user limits for {len(user_limits)} users")
        else:
            user_limits = {}
            logger.info("No existing user limits file found, starting fresh")
    except Exception as e:
        logger.error(f"Error loading user limits: {e}")
        user_limits = {}

def get_user_limits(user_id: int) -> UserLimits:
    if user_id not in user_limits:
        user_limits[user_id] = UserLimits()
    return user_limits[user_id]

def extract_text_from_file(file_content: bytes, file_extension: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
    try:
        if file_extension == '.txt':
            return file_content.decode('utf-8', errors='ignore')
        
        elif file_extension == '.pdf':
            pdf_file = io.BytesIO(file_content)
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text() + "\n"
            return text
        
        elif file_extension == '.docx':
            docx_file = io.BytesIO(file_content)
            doc = Document(docx_file)
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            return text
        
        else:
            return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."
    
    except Exception as e:
        logger.error(f"Error extracting text from {file_extension}: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞ {file_extension}."

def log_user_action(user_id: int, username: str, action: str, query: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "user_id": user_id,
        "username": username,
        "action": action,
        "query": query[:100] + "..." if len(query) > 100 else query
    }
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    with open("user_logs.jsonl", "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
    
    logger.info(f"User {user_id} ({username}): {action}")

def markdown_to_html(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç markdown –≤ HTML –¥–ª—è Telegram"""
    # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º —Å–ª–æ–∂–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)  # **bold** -> <b>bold</b>
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)      # *italic* -> <i>italic</i>
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)  # `code` -> <code>code</code>
    text = re.sub(r'###\s*(.*)', r'<b>\1</b>', text)     # ### Header -> <b>Header</b>
    text = re.sub(r'##\s*(.*)', r'<b>\1</b>', text)      # ## Header -> <b>Header</b>
    text = re.sub(r'#\s*(.*)', r'<b>\1</b>', text)       # # Header -> <b>Header</b>
    
    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –æ—Ç [1] –¥–æ [20]
    text = re.sub(r'\[([1-9]|1[0-9]|20)\]', '', text)
    
    # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è markdown —Ä–∞–∑–º–µ—Ç–∫—É  
    text = re.sub(r'[\[\]()]', '', text)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r'[ \t]+', ' ', text)  # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã, –ù–ï –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    
    return text.strip()

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = [
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton("üìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞", callback_data="analyze_document")],
        [InlineKeyboardButton("‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="create_document")],
        [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_message = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
        
        "ü§ñ <b>–ö–∞—Ä–º–∞–Ω–Ω—ã–π –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</b> ‚Äî –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –†–§\n\n"
        
        "üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ ‚ùì <b>–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b> —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "‚Ä¢ üìÑ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã</b> (.txt, .docx, .pdf)\n"
        "‚Ä¢ ‚úçÔ∏è <b>–°–æ–∑–¥–∞–≤–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</b> –ø–æ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n\n"
        
        "üìä <b>–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:</b>\n"
        "‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ 10 –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n\n"
        
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(
        welcome_message,
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    if query.data == "ask_question":
        await query.edit_message_text(
            "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ. –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, "
            "—Ç–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ.\n\n"
            "üìù <i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        context.user_data['waiting_for'] = 'question'
    
    elif query.data == "analyze_document":
        await query.edit_message_text(
            "üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
            "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
            "‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
            "‚Ä¢ .txt ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ .docx ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç—ã Word\n"
            "‚Ä¢ .pdf ‚Äî PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
            "‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë\n\n"
            "üîç <b>–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:</b> –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, —Ä–∏—Å–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        context.user_data['waiting_for'] = 'analyze_document'
    
    elif query.data == "create_document":
        await query.edit_message_text(
            "‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
            "üìù <b>–®–∞–≥ 1:</b> –û–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞–º –Ω—É–∂–µ–Ω\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
            "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ 1 –≥–æ–¥\n"
            "‚Ä¢ –ü—Ä–µ—Ç–µ–Ω–∑–∏—è –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∑–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä\n"
            "‚Ä¢ –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞\n"
            "‚Ä¢ –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞\n"
            "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä –∑–∞–π–º–∞ –º–µ–∂–¥—É —Ñ–∏–∑–ª–∏—Ü–∞–º–∏\n\n"
            "üì§ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ì–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx\n\n"
            "‚úèÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —á—Ç–æ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞–º –Ω—É–∂–µ–Ω</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        context.user_data['waiting_for'] = 'create_instructions'
    
    elif query.data == "help":
        await query.edit_message_text(
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>\n\n"
            
            "ü§ñ <b>–û –±–æ—Ç–µ:</b>\n"
            "–ö–∞—Ä–º–∞–Ω–Ω—ã–π –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ "
            "–≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
            
            "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\n"
            
            "‚ùì <b>–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã</b>\n"
            "‚Ä¢ –ü—Ä–∞–≤–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤\n"
            "‚Ä¢ –ü–æ–º–æ—â—å –≤ —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö\n\n"
            
            "üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n"
            "‚Ä¢ –ò–∑—É—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –∏ –Ω–µ–¥–æ—á–µ—Ç–æ–≤\n\n"
            
            "‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n"
            "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä—ã –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤\n"
            "‚Ä¢ –ü—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏ –∑–∞—è–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –¢—Ä—É–¥–æ–≤—ã–µ –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
            
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:</b>\n"
            "–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–æ–º–æ—â—å. –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö "
            "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —é—Ä–∏—Å—Ç–æ–º.\n\n"
            
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @your_support",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
    
    elif query.data == "back_to_main":
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        await query.edit_message_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )

async def ask_perplexity(question: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ Perplexity API"""
    url = "https://api.perplexity.ai/chat/completions"
    
    headers = {
        "Authorization": f"Bearer {PERPLEXITY_API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    system_prompt = (
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –ø—Ä–∞–≤–µ. "
        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞ –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, "
        "–≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å. "
        "–î–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ."
    )
    
    data = {
        "model": "sonar-pro",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ],
        "max_tokens": 2000,
        "temperature": 0.2
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        
        result = response.json()
        return result['choices'][0]['message']['content']
    
    except Exception as e:
        logger.error(f"Perplexity API error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def ask_chatgpt(prompt: str, document_content: str = "") -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ OpenRouter API"""
    try:
        if document_content:
            full_prompt = f"{prompt}\n\n–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{document_content}"
        else:
            full_prompt = prompt
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if "–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥" in prompt or "–°–æ–∑–¥–∞–π" in prompt:
            system_content = """–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –ø—Ä–∞–≤—É.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
- –°–æ–∑–¥–∞–≤–∞–π –ü–û–õ–ù–´–ï, –≥–æ—Ç–æ–≤—ã–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –†–§
- –í–∫–ª—é—á–∞–π –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Ä–∞–∑–¥–µ–ª—ã
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç—ã –ª–æ–≥–∏—á–Ω–æ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
- –î–æ–±–∞–≤–ª—è–π –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–§–ò–û, –¥–∞—Ç—ã, –∞–¥—Ä–µ—Å–∞)
- –°–æ–±–ª—é–¥–∞–π –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§
- –£–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ
- –î–æ–±–∞–≤–ª—è–π –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –∏ –ø–µ—á–∞—Ç–µ–π

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown-—Ä–∞–∑–º–µ—Ç–∫—É (–Ω–∏–∫–∞–∫–∏—Ö #, **, _, –∏ —Ç.–¥.)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã # –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π ** –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∂–∏—Ä–Ω—ã–º
- –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
- –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∏—à–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
- –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã

–†–∞–±–æ—Ç–∞–π —Ç–æ–ª—å–∫–æ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –†–§."""
        else:
            system_content = "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –ø—Ä–∞–≤—É. –†–∞–±–æ—Ç–∞–π —Ç–æ–ª—å–∫–æ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏. –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–∞–≤–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç."
        
        response = await openrouter_client.chat.completions.create(
            model="openai/gpt-4o-mini",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ OpenRouter
            messages=[
                {"role": "system", "content": system_content},
                {"role": "user", "content": full_prompt}
            ],
            max_tokens=3000,
            temperature=0.7,
            extra_headers={
                "HTTP-Referer": "https://pocket-consultant.ru",
                "X-Title": "Pocket Consultant Bot"
            }
        )
        
        return response.choices[0].message.content
    
    except Exception as e:
        logger.error(f"OpenRouter API error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message_text = update.message.text
    waiting_for = context.user_data.get('waiting_for')
    
    if waiting_for == 'create_instructions':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        context.user_data['create_instructions'] = message_text
        log_user_action(user.id, user.username or "Unknown", "create_instructions", message_text)
        
        # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        user_limits_obj = get_user_limits(user.id)
        
        if not user_limits_obj.can_process_document():
            await update.message.reply_text(
                "‚õî –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (10 –≤ –¥–µ–Ω—å).\n\n"
                "üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞ ‚Äî –ª–∏–º–∏—Ç –æ–±–Ω—É–ª–∏—Ç—Å—è\n"
                "‚Ä¢ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –Ω–∞ "
                "<a href='https://pocket-consultant.ru'>pocket-consultant.ru</a>",
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_keyboard()
            )
            return

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
        waiting_message = await update.message.reply_text(
            "‚è≥ –°–æ–∑–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥."
        )
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        async def keep_typing():
            while True:
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
                await asyncio.sleep(4)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –≤ —Ñ–æ–Ω–µ
        typing_task = asyncio.create_task(keep_typing())
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–µ–¥. –°–æ–∑–¥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {message_text}

–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–û–ó–î–ê–ù–ò–Æ:
1. –°–æ–∑–¥–∞–π –ü–û–õ–ù–´–ô —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –†–§
3. –í–∫–ª—é—á–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
4. –î–æ–±–∞–≤—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–§–ò–û, –¥–∞—Ç—ã, –∞–¥—Ä–µ—Å–∞ –∏ —Ç.–¥.)
5. –°–æ–±–ª—é–¥–∞–π –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§
6. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç –ª–æ–≥–∏—á–Ω–æ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –ø—É–Ω–∫—Ç–æ–≤
7. –î–æ–±–∞–≤—å –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –∏ –ø–µ—á–∞—Ç–µ–π –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
8. –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤ –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown-—Ä–∞–∑–º–µ—Ç–∫—É (–Ω–∏–∫–∞–∫–∏—Ö #, **, _, –∏ —Ç.–¥.)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã # –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π ** –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∂–∏—Ä–Ω—ã–º
- –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
- –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∏—à–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
- –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏)
- –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
- –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å
- –ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π

–°–æ–∑–¥–∞–π –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç –ë–ï–ó markdown-—Ä–∞–∑–º–µ—Ç–∫–∏:"""
            
            logger.info(f"Creating document for user {user.id}: {message_text}")
            
            # –ó–∞–ø—Ä–æ—Å –∫ ChatGPT –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            response = await ask_chatgpt(prompt, "")
            logger.info(f"Document created successfully for user {user.id}")
            user_limits_obj.increment_documents()
            save_user_limits()
            
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            typing_task.cancel()
            try:
                await typing_task
            except asyncio.CancelledError:
                pass
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            try:
                await waiting_message.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            if response:
                # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Word
                from docx import Document as DocxDocument
                doc = DocxDocument()
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç
                paragraphs = response.split('\n\n')
                for paragraph_text in paragraphs:
                    if paragraph_text.strip():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                        is_header = False
                        
                        # –ó–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏–π
                        if (paragraph_text.isupper() and len(paragraph_text) < 150) or \
                           any(word in paragraph_text.upper() for word in ['–î–û–ì–û–í–û–†', '–°–û–ì–õ–ê–®–ï–ù–ò–ï', '–ó–ê–Ø–í–õ–ï–ù–ò–ï', '–ü–†–ï–¢–ï–ù–ó–ò–Ø', '–î–û–í–ï–†–ï–ù–ù–û–°–¢–¨', '–£–í–ï–î–û–ú–õ–ï–ù–ò–ï', '–ü–†–ò–ö–ê–ó', '–†–ê–°–ü–û–†–Ø–ñ–ï–ù–ò–ï']):
                            is_header = True
                        
                        # –ó–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        elif any(paragraph_text.strip().upper().startswith(pattern) for pattern in [
                            '1.', '2.', '3.', '4.', '5.', 'I.', 'II.', 'III.', 'IV.', 'V.',
                            '–ü–†–ï–î–ú–ï–¢', '–ü–†–ê–í–ê –ò –û–ë–Ø–ó–ê–ù–ù–û–°–¢–ò', '–û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨', '–°–†–û–ö–ò', '–ó–ê–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–´–ï',
                            '–°–¢–û–†–û–ù–´ –î–û–ì–û–í–û–†–ê', '–¶–ï–ù–ê', '–ü–û–†–Ø–î–û–ö –†–ê–°–ß–ï–¢–û–í', '–§–û–†–°-–ú–ê–ñ–û–†'
                        ]):
                            is_header = True
                        
                        if is_header:
                            p = doc.add_paragraph(paragraph_text.strip())
                            p.alignment = 1 if len(paragraph_text) < 100 else 0  # –¶–µ–Ω—Ç—Ä –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                            # –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º
                            for run in p.runs:
                                run.bold = True
                        else:
                            doc.add_paragraph(paragraph_text.strip())
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
                import io
                docx_buffer = io.BytesIO()
                doc.save(docx_buffer)
                docx_content = docx_buffer.getvalue()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                doc_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
                if "–¥–æ–≥–æ–≤–æ—Ä" in message_text.lower():
                    doc_type = "–¥–æ–≥–æ–≤–æ—Ä"
                elif "–∑–∞—è–≤–ª–µ–Ω–∏–µ" in message_text.lower():
                    doc_type = "–∑–∞—è–≤–ª–µ–Ω–∏–µ"
                elif "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è" in message_text.lower():
                    doc_type = "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è"
                elif "–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å" in message_text.lower():
                    doc_type = "–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
                elif "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" in message_text.lower():
                    doc_type = "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                
                filename = f"{doc_type}.docx"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                await update.message.reply_document(
                    document=io.BytesIO(docx_content),
                    filename=filename,
                    caption=(
                        "‚úÖ <b>–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                        "üìÑ –ì–æ—Ç–æ–≤—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word\n\n"
                        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥ –≤–∞—à—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é. "
                        "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —é—Ä–∏—Å—Ç–æ–º.\n\n"
                        "üåü –ü–æ–ª–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ "
                        "<a href='https://pocket-consultant.ru'>pocket-consultant.ru</a>"
                    ),
                    parse_mode=ParseMode.HTML
                )
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
                
        except Exception as e:
            logger.error(f"Error creating document: {str(e)}")
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ\n"
                "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ\n\n"
                "üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_keyboard()
            )
            return
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data.clear()
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        
    elif waiting_for == 'question':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Perplexity
        user_limits_obj = get_user_limits(user.id)
        
        if not user_limits_obj.can_ask_question():
            await update.message.reply_text(
                "‚õî –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (10 –≤ –¥–µ–Ω—å).\n\n"
                "üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞ ‚Äî –ª–∏–º–∏—Ç –æ–±–Ω—É–ª–∏—Ç—Å—è\n"
                "‚Ä¢ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –Ω–∞ "
                "<a href='https://pocket-consultant.ru'>pocket-consultant.ru</a>",
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_keyboard()
            )
            return
        
        log_user_action(user.id, user.username or "Unknown", "ask_question", message_text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
        waiting_message = await update.message.reply_text(
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 20 —Å–µ–∫—É–Ω–¥."
        )
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        async def keep_typing():
            while True:
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
                await asyncio.sleep(4)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –≤ —Ñ–æ–Ω–µ
        typing_task = asyncio.create_task(keep_typing())
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ Perplexity
            answer = await ask_perplexity(message_text)
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            typing_task.cancel()
            try:
                await typing_task
            except asyncio.CancelledError:
                pass
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            try:
                await waiting_message.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        user_limits_obj.increment_questions()
        save_user_limits()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
        formatted_answer = markdown_to_html(answer)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        final_answer = (
            f"{formatted_answer}\n\n"
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è. "
            "–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —é—Ä–∏—Å—Ç–æ–º.\n\n"
            "üåü –ü–æ–ª–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ "
            "<a href='https://pocket-consultant.ru'>pocket-consultant.ru</a>"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(final_answer) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [final_answer[i:i+4000] for i in range(0, len(final_answer), 4000)]
            for part in parts:
                await update.message.reply_text(
                    part,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
        else:
            await update.message.reply_text(
                final_answer,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await update.message.reply_text(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user = update.effective_user
    waiting_for = context.user_data.get('waiting_for')
    
    if waiting_for != 'analyze_document':
        await update.message.reply_text(
            "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return
    
    user_limits_obj = get_user_limits(user.id)
    
    if not user_limits_obj.can_process_document():
        await update.message.reply_text(
            "‚õî –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (10 –≤ –¥–µ–Ω—å).\n\n"
            "üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞ ‚Äî –ª–∏–º–∏—Ç –æ–±–Ω—É–ª–∏—Ç—Å—è\n"
            "‚Ä¢ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –Ω–∞ "
            "<a href='https://pocket-consultant.ru'>pocket-consultant.ru</a>",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )
        return
    
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (20 –ú–ë)
    if document.file_size > 20 * 1024 * 1024:
        await update.message.reply_text(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    allowed_extensions = ['.txt', '.docx', '.pdf']
    file_extension = os.path.splitext(document.file_name)[1].lower()
    
    if file_extension not in allowed_extensions:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .txt, .docx, .pdf",
            reply_markup=get_main_keyboard()
        )
        return
    
    log_user_action(user.id, user.username or "Unknown", "analyze_document_file", document.file_name)
    
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    waiting_message = await update.message.reply_text(
        "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥."
    )
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    async def keep_typing():
        while True:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            await asyncio.sleep(4)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –≤ —Ñ–æ–Ω–µ
    typing_task = asyncio.create_task(keep_typing())
    
    response = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        file_content = await file.download_as_bytearray()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
        document_text = extract_text_from_file(file_content, file_extension)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω
        if not document_text or len(document_text.strip()) < 10:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è ChatGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã, –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        
        logger.info(f"Processing document analysis for user {user.id}, document length: {len(document_text)} chars")
        logger.info(f"Original document preview: {document_text[:200]}...")
        
        # –ó–∞–ø—Ä–æ—Å –∫ ChatGPT
        response = await ask_chatgpt(prompt, document_text[:8000])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        logger.info(f"AI response preview: {response[:200]}..." if response else "No response received")
        user_limits_obj.increment_documents()
        save_user_limits()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        typing_task.cancel()
        try:
            await typing_task
        except asyncio.CancelledError:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
        try:
            await waiting_message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    try:
        if response is None:
            raise Exception("No response received")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
        formatted_response = markdown_to_html(response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        final_response = (
            f"üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b>\n\n"
            f"{formatted_response}\n\n"
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑. "
            "–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —é—Ä–∏—Å—Ç–æ–º.\n\n"
            "üåü –ü–æ–ª–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ "
            "<a href='https://pocket-consultant.ru'>pocket-consultant.ru</a>"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(final_response) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [final_response[i:i+4000] for i in range(0, len(final_response), 4000)]
            for part in parts:
                await update.message.reply_text(
                    part,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
        else:
            await update.message.reply_text(
                final_response,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
    
    except Exception as e:
        logger.error(f"Error processing document: {str(e)}")
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    context.user_data.clear()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not found in environment variables")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    load_user_limits()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 